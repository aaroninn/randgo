package randgo

import (
	""
)

//思路：将形容词、人名、和地名放在三个不同的数组中，然后以三个数组中的最大长度-1中选中3个数生成全排列，储存在数组中，以这个数组的最大长度-1使用
//sort.Int63n()生成随机数，选出排列数组中的排列，然后看对应的数字是否超出形容词、人名、地名数组的最大长度，超出则将其从数组中删除，以新的长度重
//新随机。不超出则将其组合成用户名，并将对应的排列从数组删除。或者使用map储存已经使用或者无效的排列的下标号。实际生产中如果词语比较多，可以将形容
//词、人名、地名以 序号/形容词/人名/地名之类的形式储存在数据库中，节约内存的使用，使代码更加干净。
//后续优化思路：以更加节约内存的方式储存生成的排列（可能会牺牲一部分生成用户名的速度），此外目前的方法一旦生成排列并开始运行就无法轻易的扩展形容词、
//人名、地名的数组或数据库表，需要一个扩展性更好的实现思路


//今天上午还有其他事情，没有时间写出实现，下午或者晚上有时间可能会提交具体的实现。
//PS:那个算法虽然知道是使用的异或、移位操作的不可逆原理，但还是写不大来。。。
func GenerateUserName()